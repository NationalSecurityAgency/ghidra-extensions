/* ###
 * IP: GHIDRA
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Builds a Ghidra Extension for a given Ghidra installation.
//
// An absolute path to the Ghidra installation directory must be supplied either by setting the 
// GHIDRA_INSTALL_DIR environment variable or Gradle project property:
//
//     > export GHIDRA_INSTALL_DIR=<Absolute path to Ghidra> 
//     > gradle
//
//         or
//
//     > gradle -PGHIDRA_INSTALL_DIR=<Absolute path to Ghidra>
//
// Gradle should be invoked from the directory of the project to build.  Please see the
// application.gradle.version property in <GHIDRA_INSTALL_DIR>/Ghidra/application.properties
// for the correction version of Gradle to use for the Ghidra installation you specify.

//----------------------START "DO NOT MODIFY" SECTION------------------------------

if (findProject(':Generic') != null) {

	apply from: "$rootProject.projectDir/gradle/distributableGhidraExtension.gradle"
	apply from: "$rootProject.projectDir/gradle/javaProject.gradle"
	apply from: "$rootProject.projectDir/gradle/javaTestProject.gradle"
	apply from: "$rootProject.projectDir/gradle/debugger/hasPythonPackage.gradle"
	
	apply plugin: 'eclipse'
	eclipse.project.name = 'Xtra Debugger-agent-xfrida'
	
	dependencies {
		api project(path: ':Debugger-rmi-trace')
		api project(path: ':Debugger-agent-gdb')
		api project(path: ':Debugger-agent-lldb')
	}

}
else {

	def ghidraInstallDir
	
	if (System.env.GHIDRA_INSTALL_DIR) {
	    ghidraInstallDir = System.env.GHIDRA_INSTALL_DIR
	}
	else if (project.hasProperty("GHIDRA_INSTALL_DIR")) {
	    ghidraInstallDir = project.getProperty("GHIDRA_INSTALL_DIR")
	}
	
	if (ghidraInstallDir) {
	    apply from: new File(ghidraInstallDir).getCanonicalPath() + "/support/buildExtension.gradle"
	}
	else {
	    throw new GradleException("GHIDRA_INSTALL_DIR is not defined!")
	}
	
	task assemblePyPackage(type: Copy) {
		from "src/main/py"
		into "build/pypkg/"
	}
	
	task buildPyPackage {
		ext.dist = { file("build/pypkg/dist") }
		inputs.files(assemblePyPackage)
		outputs.dir(dist)
		doLast {
			def exe = "python"
			exec {
				workingDir { "build/pypkg" }
				commandLine exe, "-m", "pip", "install"
				args "."
			}
		}
	}
	
	buildExtension.dependsOn buildPyPackage
}
	

